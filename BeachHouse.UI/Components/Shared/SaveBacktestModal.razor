@using System.ComponentModel.DataAnnotations

@if (IsVisible)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <EditForm Model="@_model" OnValidSubmit="HandleConfirm" FormName="SaveBacktestForm">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">Save Backtest Results</h5>
                        <button type="button" class="btn-close" @onclick="HandleClose"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="notes" class="form-label">Notes (Optional)</label>
                            <InputTextArea id="notes" class="form-control" @bind-Value="_model.Notes" rows="4" placeholder="e.g., 'Baseline run of CTF 3% before Q2 experiments.'" />
                            <ValidationMessage For="() => _model.Notes" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HandleClose">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Results</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private SaveModel _model = new();

    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<string> OnConfirm { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private async Task HandleConfirm()
    {
        await OnConfirm.InvokeAsync(_model.Notes ?? string.Empty);
        _model = new(); // Reset form
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
    }

    public class SaveModel
    {
        [MaxLength(1000, ErrorMessage = "Notes cannot exceed 1000 characters.")]
        public string? Notes { get; set; }
    }
}
