@page "/transactions"
@inject BrokerageService BrokerageService
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Transaction History</PageTitle>

<h1>Transaction History</h1>

@if (transactions is null)
{
    <p><em>Loading transaction log...</em></p>
}
else if (!transactions.Any())
{
    <p><em>No transactions have been recorded.</em></p>
}
else
{
    <table class="table table-sm table-striped">
        <thead class="table-dark">
            <tr>
                <th>Date</th>
                <th>Type</th>
                <th>Ticker</th>
                <th class="text-end">Shares</th>
                <th class="text-end">Price</th>
                <th class="text-end">Total Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tx in transactions)
            {
                <tr>
                    <td>@tx.TransactionDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@tx.TransactionType</td>
                    <td>@tx.Ticker</td>
                    <td class="text-end">@tx.Shares?.ToString("N2")</td>
                    <td class="text-end">@tx.PricePerShare?.ToString("C")</td>
                    <td class="text-end @(tx.TotalAmount >= 0 ? "text-success" : "text-danger")">@tx.TotalAmount.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private System.Collections.ObjectModel.ObservableCollection<TransactionHistory>? transactions;

    protected override async Task OnInitializedAsync()
    {
        await BrokerageService.InitializeAsync();
        transactions = BrokerageService.Transactions;
        transactions.CollectionChanged += OnTransactionsChanged;
    }

    private void OnTransactionsChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (transactions != null)
        {
            transactions.CollectionChanged -= OnTransactionsChanged;
        }
    }
}
